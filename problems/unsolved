======================
Convert from bigEndian to LittleEndian
======================
Two ﬁnite, strictly increasing, integer sequences are given. Any common integer between the two sequences constitute an intersection point. Take for example the following two sequences where intersection points are 
printed in bold: 
First= 3 5 7 9 20 25 30 40 55 56 57 60 62 
Second= 1 4 7 11 14 25 44 47 55 57 100 
You can ‘walk” over these two sequences in the following way: 
1. You may start at the beginning of any of the two sequences. Now start moving forward. 
2. At each intersection point, you have the choice of either continuing with the same sequence you’re currently on, or switching to the other sequence.
The objective is ﬁnding a path that produces the maximum sum of data you walked over. In the above example, the largest possible sum is 450 which is the result of adding 3, 5, 7, 9, 20, 25, 44, 47, 55, 56, 57, 60, and 62 
========================

I was asked to design an application that sends a message to two friends if they come within two miles of each other. 
I gave him a solution indicating the data structures used to maintain the friend list and model of the solution . 
He pointed out the cons of the solution and I modified the data structure
======================

string[][] names={{"perk","parker"},{"jhon","raj"},{"ram","lakshman"}}; 
write a java program print lastname,then firstname in sorted order without using string.compareTo,collections.sort,arrays.sort


======================

int[] a1={1,3,5,7} int[] a2={3,6,8,9} int[] a3={}... 
Merge first two arrays in a sorted order result put it in third array output will be{1,3,3,5,7,8} write a code for this one?
======================
You have an array of integers(size N), such that each integer is present an odd number of time, except 3 of them(which are present even number of times). Find the three numbers. 

Only XOR based solution was permitted. 
Time Complexity: O(N) 
Space Complexity: O(1) 

Sample Input: 
{1,6,4,1,4,5,8,8,4,6,8,8,9,7,9,5,9} 
Sample Output: 
1 6 8
======================
Traveler wants to travel from city “A” to city “D”. 
There is a path from city “A” to city “D”. 
Path consists of steps, i.e. travel from city “A” to city “B”. 
Path is encoded as sequence of steps. 
Sequence is in incorrect order. 
Your task is to restore order of steps in the path. 
Input (unordered sequence): 
C -> D 
A -> B 
B -> C 
Output (Correctly ordered list which represents path): 
A, B, C, D 
Implement following API:


class Step {
String start;
String finish;
};

class Node {
String value;
Node next;
}

List<String> findPath(List<Step> steps) {
}
======================
Suppose you have a million integer numbers. 
Return all possible values of a,b and c such that 
a+b+c<=d. 
d will be provided to you. 
ex: if the numbers are 1,2,3,4,5,6,7 
and d=7 
[1,2,3] 
[1,2,4] 

[1,2,3] will be same as [1,3,2] and [3,2,1]... 

follow up: 

Return all such parts that satisfy the above condition if d is not provided.
======================
How many occurrences of a given search word can you find in a two-dimensional array of characters given that the word can go up, down, left, right, and around 90 degree bends? 

Ex: 
Count of occurrences of SNAKES 
S N B S N 
B A K E A 
B K B B K 
S E B S E 

The answer is 3. 

I jus want to give a brief explanation about this question since all the others just posted their code. The basic idea is to do search at each possible possition. In this example, we want to find "SNAKE", then the possible start positions are the positions where the character is "S", then you keep a visited array to avoid going back to the same position. The visited array is a little bit tricky. For example, if the matrix is : 
S N B S N 
B A K E A 
B K B B K 
S E B S E 
Then you go from (0, 0) to (1, 0), to (2, 0), you visited array in these three positions are set as true, but when you discovered that (2, 0) is not a possible answer, you should reset the visited array at position (2, 0) to false immediately since you may go to it later.
======================

======================/*
ACM uses a new special technology of building its transceiver stations. This technology is called Modular Cuboid Architecture (MCA) and is covered by a patent of Lego company. All parts of the transceiver are shipped in unit blocks that have the form of cubes of exactly the same size. The cubes can be then connected to each other. The MCA is modular architecture, that means we can select preferred transceiver configuration and buy only those components we need .

The cubes must be always connected "face-to-face", i.e. the whole side of one cube is connected to the whole side of another cube. One cube can be thus connected to at most six other units. The resulting equipment, consisting of unit cubes is called The Bulk in the communication technology slang.

Sometimes, an old and unneeded bulk is condemned, put into a storage place, and replaced with a new one. It was recently found that ACM has many of such old bulks that just occupy space and are no longer needed. The director has decided that all such bulks must be disassembled to single pieces to save some space. Unfortunately, there is no documentation for the old bulks and nobody knows the exact number of pieces that form them. You are to write a computer program that takes the bulk description and computes the number of unit cubes.

Each bulk is described by its faces (sides). A special X-ray based machine was constructed that is able to localise all faces of the bulk in the space, even the inner faces, because the bulk can be partially hollow (it can contain empty spaces inside). But any bulk must be connected (i.e. it cannot drop into two pieces) and composed of whole unit cubes.

 

Input

There is a single positive integer T on the first line of input (equal to about 1000). It stands for the number of bulks to follow. Each bulk description begins with a line containing single positive integer F, 6 <= F <= 250, stating the number of faces. Then there are F lines, each containing one face description. All faces of the bulk are always listed, in any order. Any face may be divided into several distinct parts and described like if it was more faces. Faces do not overlap. Every face has one inner side and one outer side. No side can be "partially inner and partially outer".

Each face is described on a single line. The line begins with an integer number P stating the number of points that determine the face, 4 <= P <= 200. Then there are 3 x P numbers, coordinates of the points. Each point is described by three coordinates X,Y,Z (0 <= X,Y,Z <= 1000) separated by spaces. The points are separated from each other and from the number P by two space characters. These additional spaces were added to make the input more human readable. The face can be constructed by connecting the points in the specified order, plus connecting the last point with the first one.

The face is always composed of "unit squares", that means every edge runs either in X, Y or Z-axis direction. If we take any two neighbouring points X1,Y1,Z1 and X2,Y2,Z2, then the points will always differ in exactly one of the three coordinates. I.e. it is either X1 <> X2, or Y1 <> Y2, or Z1 <> Z2, other two coordinates are the same. Every face lies in an orthogonal plane, i.e. exactly one coordinate is always the same for all points of the face. The face outline will never touch nor cross itself.

 

Output

Your program must print a single line for every test case. The line must contain the sentence The bulk is composed of V units., where V is the volume of the bulk.

Example

Sample Input:

2
12
4  10 10 10  10 10 20  10 20 20  10 20 10
4  20 10 10  20 10 20  20 20 20  20 20 10
4  10 10 10  10 10 20  20 10 20  20 10 10
4  10 20 10  10 20 20  20 20 20  20 20 10
4  10 10 10  10 20 10  20 20 10  20 10 10
5  10 10 20  10 20 20  20 20 20  20 15 20  20 10 20
4  14 14 14  14 14 16  14 16 16  14 16 14
4  16 14 14  16 14 16  16 16 16  16 16 14
4  14 14 14  14 14 16  16 14 16  16 14 14
4  14 16 14  14 16 16  16 16 16  16 16 14
4  14 14 14  14 16 14  16 16 14  16 14 14
4  14 14 16  14 16 16  16 16 16  16 14 16
12
4  20 20 30  20 30 30  30 30 30  30 20 30
4  10 10 10  10 40 10  40 40 10  40 10 10
6  10 10 20  20 10 20  20 30 20  30 30 20  30 40 20  10 40 20
6  20 10 20  20 20 20  30 20 20  30 40 20  40 40 20  40 10 20
4  10 10 10  40 10 10  40 10 20  10 10 20
4  10 40 10  40 40 10  40 40 20  10 40 20
4  20 20 20  30 20 20  30 20 30  20 20 30
4  20 30 20  30 30 20  30 30 30  20 30 30
4  10 10 10  10 40 10  10 40 20  10 10 20
4  40 10 10  40 40 10  40 40 20  40 10 20
4  20 20 20  20 30 20  20 30 30  20 20 30
4  30 20 20  30 30 20  30 30 30  30 20 30

Sample Output:

The bulk is composed of 992 units.
The bulk is composed of 10000 units.

*/